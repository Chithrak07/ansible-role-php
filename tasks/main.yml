---
- name: Check if OS is Ubuntu LTS
  fail: msg="Server must be Ubuntu LTS"
  when: ansible_distribution != 'Ubuntu'
    or (ansible_distribution_version != '14.04'
      and ansible_distribution_version != '16.04'
      and ansible_distribution_version != '18.04')

- name: Display all variables/facts known for a host
  debug:
    var: hostvars[inventory_hostname]
    verbosity: 4

# Example that prints two lines of messages, but only if there is an environment value set
- debug:
    msg:
    - "Provisioning based on MY_PHP:  {{ lookup('env', 'MY_PHP') }}"
    - "php_default_version:           {{ php_default_version }}"
    - "MOLECULE_DISTRO:               {{ lookup('env', 'MOLECULE_DISTRO') }}"
    - "php_versions:                  {{ lookup('env', 'PHP_VERSIONS') }}"

- name: Add ondrej repo to allow multiple PHP versions
  apt_repository:
    repo: "ppa:ondrej/php"
    update_cache: yes

- name: Include php version specific playbook
  include_tasks: "php{{ item }}.yml"
  with_items: "{{ php_versions }}"
  when: php_versions is defined

- name: Create /etc/acro folder if it doesn't exist
  file:
    path: /etc/acro
    state: directory
    mode: '0755'
  register: etc_directory_exists

- name: Check for existence of /etc/acro/add-website.conf.php{{ php_default_version }}
  stat:
    path: /etc/acro/add-website.conf.php{{ php_default_version }}
  register: add_website_conf
  tags:
    - acroutils

- name: Create /etc/acro/add-website.conf.php{{ php_default_version }}
  template:
    src: "{{ role_path }}/templates/etc/acro/add-website.conf.php{{ php_default_version }}.j2"
    dest: /etc/acro/add-website.conf.php{{ php_default_version }}
    owner: root
    group: root
    mode: 0644
    backup: true
  when: not add_website_conf.stat.exists
  register: copy_website_conf

- name: Set default PHP version to {{ php_default_version }} (acro-add-website.sh)
  file:
    state: link
    src: /etc/acro/add-website.conf.php{{ php_default_version }}
    dest: /etc/acro/add-website.conf
  when: (add_website_conf is defined or copy_website_conf is defined)
    and (add_website_conf.stat is defined or copy_website_conf.stat is defined)
    and (add_website_conf.stat.exists or copy_website_conf.exists)
  tags:
    - acroutils

- name: Get default PHP version
  shell: >
    set -o pipefail && /usr/bin/php -v | grep 'PHP '
  register: php_installed_default_version
  failed_when: false
  changed_when: false

- debug:
    msg:
    - "php_installed_default_version:  {{ lookup('env', 'php_installed_default_version.stdout') }}"
    - "add_website_conf:  {{ lookup('env', 'add_website_conf') }}"

- name: Set default PHP version to 5.6 (PHP CLI)
  shell: update-alternatives --set php /usr/bin/php{{ php_default_version }}
  register: command_result
  when: php_default_version == 5.6
    and php_installed_default_version is defined
    and php_installed_default_version.stdout is defined
    and (not php_installed_default_version.stdout | regex_search("PHP 5\.6"))
  changed_when: command_result.stdout == "to provide"

- name: Set default PHP version to 7.0 (PHP CLI)
  shell: update-alternatives --set php /usr/bin/php{{ php_default_version }}
  register: command_result
  when: php_default_version == 7.0
    and php_installed_default_version is defined
    and php_installed_default_version.stdout is defined
    and (not php_installed_default_version.stdout | regex_search("PHP 7\.0"))
  changed_when: command_result.stdout == "to provide"

- name: Set default PHP version to 7.1 (PHP CLI)
  shell: update-alternatives --set php /usr/bin/php{{ php_default_version }}
  register: command_result
  when: php_default_version == 7.1
    and php_installed_default_version is defined
    and php_installed_default_version.stdout is defined
    and (not php_installed_default_version.stdout | regex_search("PHP 7\.1"))
  changed_when: command_result.stdout == "to provide"

- name: Set default PHP version to 7.2 (PHP CLI)
  shell: update-alternatives --set php /usr/bin/php{{ php_default_version }}
  register: command_result
  when: php_default_version == 7.2
    and php_installed_default_version is defined
    and php_installed_default_version.stdout is defined
    and (not php_installed_default_version.stdout | regex_search("PHP 7\.2"))
  changed_when: command_result.stdout == "to provide"

# find out what update alternatives spits out and parse some of that through the registered variable: did this task change or not.
- name: Set default PHP version to 7.3 (PHP CLI)
  shell: update-alternatives --set php /usr/bin/php{{ php_default_version }}
  register: command_result
  when: php_default_version == 7.3
    and php_installed_default_version is defined
    and php_installed_default_version.stdout is defined
    and (not php_installed_default_version.stdout | regex_search("PHP 7\.3"))
  changed_when: command_result.stdout == "to provide"
